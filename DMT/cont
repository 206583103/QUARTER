package com.cg.app.controller;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.cg.app.domain.Application;
import com.cg.app.domain.Fields;
import com.cg.app.service.Getservice;

import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import springfox.documentation.annotations.ApiIgnore;

@RestController
@RefreshScope
public class GitController {

	@Value("${cp.fileName}")
	String CP_FILENAME;

	@Value("${dmt.fileName}")
	String DMT_FILENAME;

	@Value("${dmt.Name}")
	String DMT_NAME;

	@Value("${cp.Name}")
	String CP_NAME;

	@Autowired
	Getservice getservice;

	
	@ApiIgnore
	@GetMapping("/")
	public String home() {
		return "Application started.....";
	}
	
	
	@ApiOperation("${call to update a application }")
	@PostMapping("/quarterUpdate")
	public List<String> type(
			@ApiParam("mention") @RequestBody List<Application> application) {
		List<String> response=new ArrayList<>();
		
		
		for (int i = 0; i < application.size(); i++) {
			List<Fields> filedsList=application.get(i).getFields();
			String fName=application.get(i).getFileName();
			String applicationName=application.get(i).getApplicationName();
		
			for(Fields field:filedsList) {
				applicationName = applicationName.toLowerCase();
				if (applicationName.equals(CP_NAME)) {
					String status= getservice.fetchAndUpdateInGithub(CP_FILENAME,field,fName);
					response.add(status);
				} else if (applicationName.equals(DMT_NAME)) {
					String status= getservice.fetchAndUpdateInGithub(DMT_FILENAME, field,fName);
					response.add(status);
				} else {
					throw new RuntimeException("Incorrect APPLICATION NAME or the URL");
				}
				
				
		}}
		return response;
		
	}
		
		/*APPLICATION_NAME = APPLICATION_NAME.toLowerCase();
		if (APPLICATION_NAME.equals(CP_NAME)) {
			return getservice.fetchAndUpdateInGithub(CP_FILENAME, filedsList.get(0), file);
		} else if (APPLICATION_NAME.equals(DMT_NAME)) {
			return getservice.fetchAndUpdateInGithub(DMT_FILENAME, filedsList.get(0), file);
		} else {
			throw new RuntimeException("Incorrect APPLICATION NAME or the URL");
		}*/
		

	
	/*@ApiOperation("${call to update a application }")
	@GetMapping("/quarterUpdate/{APPLICATION_NAME}")
	public String type(
			@ApiParam("Mention the application to be updated(CP or DMT), and should not be blank") @PathVariable String APPLICATION_NAME) {

		APPLICATION_NAME = APPLICATION_NAME.toLowerCase();
		if (APPLICATION_NAME.equals(CP_NAME)) {
			return getservice.fetchAndUpdateInGithub(CP_FILENAME,CP_NAME);
		} else if (APPLICATION_NAME.equals(DMT_NAME)) {
			return getservice.fetchAndUpdateInGithub(DMT_FILENAME,DMT_NAME);
		} else {
			throw new RuntimeException("Incorrect APPLICATION NAME or the URL");
		}

	}*/

	@ApiIgnore
	@PostMapping("/client")
	public String clientTest(@RequestBody String updatedContent) throws Exception {
		return updatedContent;
	}

}
